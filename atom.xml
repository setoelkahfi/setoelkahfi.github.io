<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seto Elkahfi - iOS Developer]]></title>
  <link href="http://setoelkahfi.github.io/atom.xml" rel="self"/>
  <link href="http://setoelkahfi.github.io/"/>
  <updated>2019-01-04T18:36:19+01:00</updated>
  <id>http://setoelkahfi.github.io/</id>
  <author>
    <name><![CDATA[Seto Elkahfi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Is Buffer Overflow?]]></title>
    <link href="http://setoelkahfi.github.io/blog/2019/01/04/what-is-buffer-overflow/"/>
    <updated>2019-01-04T18:24:37+01:00</updated>
    <id>http://setoelkahfi.github.io/blog/2019/01/04/what-is-buffer-overflow</id>
    <content type="html"><![CDATA[<p>Buffer overflows result from accepting input to a program that does not fit into receiving memory buffers, and yet still continuing to write to that memory. Clearly the main issue here is that input is not being properly checked, while the principle of complete mediation requires that all accesses to objecta (in this case memory buffers) be checked to ensure that they are allowed. It would be a mistake to miss the relevance for this principle.</p>

<!-- more -->


<p>Another relevant principle here is that of least privilege. The most serious kind of buffer overflow are those that allow the user to insert code that is subsequently executed. In these situations, foreign code is executed with the same privileges as those that the running program has. For this reason, it is am unnecessary risk to allow the program to run with higher privileges than are strictly necessary for the program to complete the task.</p>

<p>Creating a buffer overflow vulnerability is a programming error. One could therefore propose that if the program code was simple then errors such as this would be less likely. In this case, one would argue for the principle of economy of mechanism.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Submodule Why My Remote HEAD Always Behind the Local HEAD]]></title>
    <link href="http://setoelkahfi.github.io/blog/2019/01/03/git-submodule-why-my-remote-head-always-behind-the-local-head/"/>
    <updated>2019-01-03T18:56:14+01:00</updated>
    <id>http://setoelkahfi.github.io/blog/2019/01/03/git-submodule-why-my-remote-head-always-behind-the-local-head</id>
    <content type="html"><![CDATA[<p>The git submodule is something I&rsquo;ve never use it extensively during my career as software developer. But fortunately, now in my current work in Sweden we use it. I&rsquo;m lucky enough to have the opportunity to actually learn to use it in real world. And this is the first simple problem that I encountered during my work with git submodule. First, let me tell you the background of the project.</p>

<!-- more -->




<h2>iOS Project With Git Submodule</h2>


<p>This is an iOS project that share resources (icon, string translations, configurations, etc.) with Android project. I will not talk about the Android project. So, basically we have translation file in .xlsx file. It&rsquo;s stored in Google docs, so everyone in the team can access, add, and modifies it. Everytime we add new new translations, we need to run a &lsquo;python&rsquo; script against it, and it will generate the resource file for both iOS and Android project. It works smoothly, thanks to our previous
developer :beer.</p>

<h2>The Missing Part</h2>


<p>As usual, after someone added new translations and generate the resource strings, she should commit it in the resource repository, which is inside the iOS project. What I missed about how git submodule works is you should also commit the change (which is the new commit inside the submodule) in the parent repository. Off course, after the other developer pushed the changes to the remote repository.</p>

<h2>The Circle CI Pull The Wrong Commit</h2>


<p>Previously I asked my colleague why my submodule HEAD is always behind the remote in parent repository. That&rsquo;s actually the effect of not committing the change in submodule repository in the parent repository. This problem will affect how our CI build pull the string translations generated in the submodule: it always pull whatever it is in the HEAD.</p>

<p>Glad I understand it. I know it might a simple concept to understand. But I hope someone will benefit from my post here. Once, everybody is a beginner.</p>

<p><a href="https://stackoverflow.com/a/36375256/1137814">https://stackoverflow.com/a/36375256/1137814</a>
<a href="https://ttboj.wordpress.com/2014/05/06/keeping-git-submodules-in-sync-with-your-branches/">https://ttboj.wordpress.com/2014/05/06/keeping-git-submodules-in-sync-with-your-branches/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Simplify Heroku App Development Environments With Git Branching]]></title>
    <link href="http://setoelkahfi.github.io/blog/2018/12/09/how-to-simplify-heroku-app-development-environments-with-git-branching/"/>
    <updated>2018-12-09T19:07:03+01:00</updated>
    <id>http://setoelkahfi.github.io/blog/2018/12/09/how-to-simplify-heroku-app-development-environments-with-git-branching</id>
    <content type="html"><![CDATA[<p>The Heroku system for managing different app&rsquo;s environments is difficult to understand for me at first. The concept of having different branches tracking different remote repository is new. But, overtime, as I use the service, I&rsquo;m kind of familiar with it.</p>

<!-- more -->


<p>The confusion for me is because an asymmetry behaviour of Git branching system itself. As written in <a href="https://longair.net/blog/2011/02/27/an-asymmetry-between-git-pull-and-git-push/">this post</a>, a simple <code>git pull</code> and <code>git push</code> will behave differently regarding remote tracking branch. You can just read it in the blog post.</p>

<p>My point is, dear future <code>self</code>, it will helpful for you if you set the <code>push.default</code> config to <code>upstream</code> (previously <code>tracking</code>). With this command, everytime you do <code>git push</code>, it will automatically push the <code>upstream</code> branch. For example, if you&rsquo;re on the <code>staging</code> branch, <code>git push</code> will update repository in <code>staging</code> remote <code>master</code> branch. Simple, right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config push.default tracking
</span><span class='line'><span class="nv">$ </span>git push
</span></code></pre></td></tr></table></div></figure>


<p>You should always follow <a href="https://devcenter.heroku.com/articles/multiple-environments">the official documentation</a> for this specific Heroku setup. Hej d√•!</p>

<p>Reference:</p>

<p><a href="https://devcenter.heroku.com/articles/multiple-environments">https://devcenter.heroku.com/articles/multiple-environments</a>
<a href="https://longair.net/blog/2011/02/27/an-asymmetry-between-git-pull-and-git-push/">https://longair.net/blog/2011/02/27/an-asymmetry-between-git-pull-and-git-push/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup Heroku App With Multiple Environtment for Each Branch on New Machine]]></title>
    <link href="http://setoelkahfi.github.io/blog/2018/12/02/how-to-setup-heroku-app-with-multiple-environtment-for-each-branch-on-new-machine/"/>
    <updated>2018-12-02T02:57:34+01:00</updated>
    <id>http://setoelkahfi.github.io/blog/2018/12/02/how-to-setup-heroku-app-with-multiple-environtment-for-each-branch-on-new-machine</id>
    <content type="html"><![CDATA[<p>Recently, I want to migrate my side project into another domain. This project is currently hosted on Heroku platform. I really like the concept of push-to-deploy that Heroku good at. It frees me from server-management thingy. And, I feel so geeky whenever I use git from command line, hahaha. Ok, let me explain the state of the app.</p>

<!-- more -->




<h2>Application Environment in Heroku Platform</h2>


<p>The app has two different environment: <code>staging</code> and <code>production</code>. I think the names are self explanatory, otherwise you do not have enough experience in developing software. Each environment will point to different branch in developer local machine. The staging environment itself is pointing to development branch. At least in my local machine. My first local machine that I use originally for this project. The production environment is pointing to master branch in local repo. I know it sounds confusing. Because it really is. And that confusion slapped my face hardly when I try to rename my app in order to migrate the domain.</p>

<p><span class='pullquote-right' data-pullquote='which make me even confuse and question my existence'>
So, each application in Heroku will has its own repository. In my case, staging app will have repo name with -staging in it. The production app simply the name itself, without prefix or suffix. At first, I naievely clone each app in different local repo, which make me even confuse and question my existence. So if I have two repos, I need to work in two different place? Hell no. That&rsquo;s the wrong way, Seto.
</span></p>

<h2>The Right Way (Really?)</h2>


<p>The right way, it turns out, is to only clone the staging app. Why? Because it contains all the commit before merging them to the production branch: <code>master</code> local branch. I mean remote production branch. I mean, what??? Anyway, just continue the reading.</p>

<p>After you clone the <code>staging</code> repo, automatically you&rsquo;ll get heroku remote. Oh no, that&rsquo;s when you use heroku command <code>heroku git:clone -a [app name]</code>. Otherwise, I think you&rsquo;ll get <code>origin</code> as remote name. Check it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote -v
</span><span class='line'>heroku    https://git.heroku.com/mycoolapp-staging.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>heroku    https://git.heroku.com/mycoolapp-staging.git <span class="o">(</span>push<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You want to make naming remotes and branches reflect to the environment and how you&rsquo;ll work. So, change the remote name into staging, the same name as the application environment it listed as the git repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote rename heroku staging
</span></code></pre></td></tr></table></div></figure>


<p>And the next step is to add <code>production</code> app as <code>production</code> remote with the magic of git. Now I&rsquo;m arguing my opinion to name the remote the sama with the app&rsquo;s environment. So <code>production</code> remote is <code>production</code> app and <code>staging</code> remote is <code>staging</code> app? <em>mikir</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote add production https://git.heroku.com/mycoolapp.git
</span><span class='line'><span class="nv">$ </span>git remote -v
</span><span class='line'>production    https://git.heroku.com/mycoolapp.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>production    https://git.heroku.com/mycoolapp.git <span class="o">(</span>push<span class="o">)</span>
</span><span class='line'>staging   https://git.heroku.com/mycoolapp-staging.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>staging   https://git.heroku.com/mycoolapp-staging.git <span class="o">(</span>push<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then, you  need to fetch each remote like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git fetch production
</span><span class='line'>remote: Counting objects: 4, <span class="k">done</span>.
</span><span class='line'>remote: Compressing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>remote: Total <span class="m">4</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">3</span> <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>Unpacking objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>From https://git.heroku.com/mycoolapp
</span><span class='line'> * <span class="o">[</span>new branch<span class="o">]</span>      master     -&gt; production/master
</span></code></pre></td></tr></table></div></figure>


<p>Now is a bit tricky but should be understandable. Make sure local <code>master</code> branch track <code>production/master</code> and local <code>staging</code> branch tracks <code>staging/master</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -b staging staging/master
</span><span class='line'>Branch <span class="s1">&#39;staging&#39;</span> <span class="nb">set </span>up to track remote branch <span class="s1">&#39;master&#39;</span> from <span class="s1">&#39;staging&#39;</span>.
</span><span class='line'>Switched to a new branch <span class="s1">&#39;staging&#39;</span>
</span><span class='line'><span class="nv">$ </span>git checkout -b master production/master
</span><span class='line'>Branch <span class="s1">&#39;master&#39;</span> <span class="nb">set </span>up to track remote branch <span class="s1">&#39;master&#39;</span> from <span class="s1">&#39;production&#39;</span>.
</span><span class='line'>Switched to a new branch <span class="s1">&#39;master&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<h2>`bundle install` And The PostgreSQL Thingy</h2>


<p>After you finish with the git stuff, you need to install the dependency. Use bundle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>And will most likely face this issue after running that command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Fetching pg 0.21.0
</span><span class='line'>Installing pg 0.21.0 with native extensions
</span><span class='line'>Gem::Ext::BuildError: ERROR: Failed to build gem native extension.
</span><span class='line'>
</span><span class='line'>current directory:
</span><span class='line'>/Users/setoelkahfi/.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pg-0.21.0/ext
</span><span class='line'>/Users/setoelkahfi/.rbenv/versions/2.5.3/bin/ruby -r ./siteconf20181203-18631-gh6gvb.rb
</span><span class='line'>extconf.rb
</span><span class='line'>checking <span class="k">for</span> pg_config... no
</span><span class='line'>No pg_config... trying anyway. If building fails, please try again with
</span><span class='line'> --with-pg-config<span class="o">=</span>/path/to/pg_config
</span><span class='line'>checking <span class="k">for</span> libpq-fe.h... no
</span><span class='line'>Can<span class="s1">&#39;t find the &#39;</span>libpq-fe.h header
</span><span class='line'>*** extconf.rb failed ***
</span><span class='line'>Could not create Makefile due to some reason, probably lack of necessary
</span><span class='line'>libraries and/or headers.  Check the mkmf.log file <span class="k">for</span> more details.  You may
</span><span class='line'>need configuration options.
</span><span class='line'>
</span><span class='line'>Provided configuration options:
</span><span class='line'>  --with-opt-dir
</span><span class='line'>  --without-opt-dir
</span><span class='line'>  --with-opt-include
</span><span class='line'>  --without-opt-include<span class="o">=</span><span class="k">${</span><span class="nv">opt</span><span class="p">-dir</span><span class="k">}</span>/include
</span><span class='line'>  --with-opt-lib
</span><span class='line'>  --without-opt-lib<span class="o">=</span><span class="k">${</span><span class="nv">opt</span><span class="p">-dir</span><span class="k">}</span>/lib
</span><span class='line'>  --with-make-prog
</span><span class='line'>  --without-make-prog
</span><span class='line'>  --srcdir<span class="o">=</span>.
</span><span class='line'>  --curdir
</span><span class='line'>  --ruby<span class="o">=</span>/Users/setoelkahfi/.rbenv/versions/2.5.3/bin/<span class="k">$(</span>RUBY_BASE_NAME<span class="k">)</span>
</span><span class='line'>  --with-pg
</span><span class='line'>  --without-pg
</span><span class='line'>  --enable-windows-cross
</span><span class='line'>  --disable-windows-cross
</span><span class='line'>  --with-pg-config
</span><span class='line'>  --without-pg-config
</span><span class='line'>  --with-pg_config
</span><span class='line'>  --without-pg_config
</span><span class='line'>  --with-pg-dir
</span><span class='line'>  --without-pg-dir
</span><span class='line'>  --with-pg-include
</span><span class='line'>  --without-pg-include<span class="o">=</span><span class="k">${</span><span class="nv">pg</span><span class="p">-dir</span><span class="k">}</span>/include
</span><span class='line'>  --with-pg-lib
</span><span class='line'>  --without-pg-lib<span class="o">=</span><span class="k">${</span><span class="nv">pg</span><span class="p">-dir</span><span class="k">}</span>/lib
</span><span class='line'>
</span><span class='line'>To see why this extension failed to compile, please check the mkmf.log which can be found
</span><span class='line'>here:
</span><span class='line'>
</span><span class='line'>/Users/setoelkahfi/.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/extensions/x86_64-darwin-17/2.5.0-static/pg-0.21.0/mkmf.log
</span><span class='line'>
</span><span class='line'>extconf failed, <span class="nb">exit </span>code 1
</span></code></pre></td></tr></table></div></figure>


<p>This is because the app is using PostgreSQL, and you don&rsquo;t have the database yet. You usually use Postgress.app for the installation. Or you can use other PostgreSQL distribution (is this the term?). Frankly speaking, it because it&rsquo;s the default database for Ruby stack on Heroku that we use PostgreSQL. But I like it. So doesn&rsquo;t really matter to me.</p>

<p>You need to install <code>postgresql</code> via Homebrew.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install postgresql
</span></code></pre></td></tr></table></div></figure>


<p>You might need to change <code>password</code> and <code>username</code> for your local database, since you committed them on your other machine.</p>

<h2>Run The App Locally</h2>


<p>If you&rsquo;re lucky (and you&rsquo;re always), you will be able to run the app locally with <code>heroku</code>command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku <span class="nb">local</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy breezy lemon squeezy, eller hur? Hejd√•!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SOLVED] Could Not Find firebase-iid-interop.aar (com.google.firebase:firebase-iid-interop:16.0.0).]]></title>
    <link href="http://setoelkahfi.github.io/blog/2018/11/30/solved-could-not-find-firebase-iid-interop-dot-aar-com-dot-google-dot-firebase-firebase-iid-interop-16-dot-0-0/"/>
    <updated>2018-11-30T11:59:41+01:00</updated>
    <id>http://setoelkahfi.github.io/blog/2018/11/30/solved-could-not-find-firebase-iid-interop-dot-aar-com-dot-google-dot-firebase-firebase-iid-interop-16-dot-0-0</id>
    <content type="html"><![CDATA[<p>In this my first work in Sweden, I was applying for iOS developer role. With my strong selling points were I&rsquo;ve been developing iOS application for almost 3 years, showed my then potential employer all the projects that I&rsquo;ve involved in (3 iOS apps, 3 websites, and I mentioned Android app, but couldn&rsquo;t showed it to them because I&rsquo;m using iPhone now), and my preference is Swift other than Objective-C. But, in this second week of my work, I&rsquo;ve already touch our Android codebase, take a look at our web admin project which is written in AngularJS, and our iOS codebase is written in Objective-C. I couldn&rsquo;t excited more :).</p>

<p>Now, let&rsquo;s back to what I&rsquo;m going to write.</p>

<!-- more -->




<h2>Android Project With Multiple Build Variants</h2>


<p>When I was setting up the Android project, I face this simple issue. I said simple because it is. Our Android project has multiple build variants. Meaning, it has different build flavours. Each client has its own build flavor. And each build type defines environment of the app: which back end it communicates to. Oh, this is for our old app system, which is in the same project for our upcoming new app system, but in different branch.</p>

<p>So, here&rsquo;s the error message when I try to build the project in Android Studio:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Could not find firebase-iid-interop.aar <span class="o">(</span>com.google.firebase:firebase-iid-interop:16.0.0<span class="o">)</span>.
</span><span class='line'>Searched in the following locations:
</span><span class='line'>    https://jcenter.bintray.com/com/google/firebase/firebase-iid-interop/16.0.0/firebase-iid-interop-16.0.0.aar
</span></code></pre></td></tr></table></div></figure>


<p>This is happened because Google removed their projects from <code>jcenter</code>, but erroneously left some artifacts with dependencies [1].</p>

<h2>Simple Solution</h2>


<p>You need to put <code>google()</code> repository BEFORE <code>jcenter()</code> [1] like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>allprojects <span class="o">{</span>
</span><span class='line'>    repositories <span class="o">{</span>
</span><span class='line'>        jcenter<span class="o">()</span>
</span><span class='line'>        maven <span class="o">{</span>
</span><span class='line'>            url <span class="s2">&quot;https://maven.google.com&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        google<span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And because each build variant has its own gradle file, I need to edit the root gradle file. Also, you need to pay attention to which repositories section you need to edit. Make sure its <code>allprojects.repositories</code> section, not the <code>buildscript.repositories</code> section [2].</p>

<p>And that&rsquo;s it. I tried to clean up the project, and then rebuild again, and viola! It works.</p>

<p>[1] <a href="https://stackoverflow.com/a/53158506/1137814">https://stackoverflow.com/a/53158506/1137814</a></br>
[2] <a href="https://github.com/geektimecoil/react-native-onesignal/issues/552#issuecomment-433077966">https://github.com/geektimecoil/react-native-onesignal/issues/552#issuecomment-433077966</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It Is Important That You Know That You Know Nothing and You Document Your Stupidity]]></title>
    <link href="http://setoelkahfi.github.io/blog/2018/11/27/it-is-important-that-you-know-that-you-know-nothing-and-you-document-your-stupidity/"/>
    <updated>2018-11-27T22:41:28+01:00</updated>
    <id>http://setoelkahfi.github.io/blog/2018/11/27/it-is-important-that-you-know-that-you-know-nothing-and-you-document-your-stupidity</id>
    <content type="html"><![CDATA[<p>In this last week, I tried hard to understand the Octopress blogging platform. It&rsquo;s the platform that powered this blog. I tried so hard to understand the concept. And after so many trials and errors, I (maybe, am I?) finally understand how it works under the hood. It should be simple and easier concept for you smart developers, but I just realize that I&rsquo;m not that smart.</p>

<!-- more -->


<h2>The Enlightenment</h2>


<p><span class='pullquote-right' data-pullquote='It can be a stupid Stackoverlow question, a meaningless GitHub repository, or an advance blogging platform.'>
So, realizing that I&rsquo;m not so smart is an important step for me. That enables me to always try to document my stupidity. It can be a stupid Stackoverlow question, a meaningless GitHub repository, or an advance blogging platform. I&rsquo;m glad that I realize it and act based on it. My future self should thank my current version.
</span></p>

<p>Now, I will try to routinely blogging technical stuffs in this blog. This is my way to separate different type of writings I conduct in other platform. Like, Wordpress.com for example. That&rsquo;s my very first blogging experience. I wrote mostly about daily life, in my native language, Indonesian. I also have blogspot blog, which I used to blog about technical stuffs in Indonesian as well. And off course other social channels, which also kind of micro blogging platform, because I also need to write something, at least.</p>

<h2>The Future Plan</h2>


<p>I&rsquo;ll try to make all my writings as neat as possible. Maybe, in the future, I will make a single platform (possibly my dot com domain), that integrate all my digital footprints. Maybe I&rsquo;ll regret it, that I produce so many data in my life. Maybe I&rsquo;ll glad that I&rsquo;m doing it. Who knows.</p>

<blockquote><p></p><footer><strong>I know nothing.</strong></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ini Ngetes Lagi]]></title>
    <link href="http://setoelkahfi.github.io/blog/2018/11/23/ini-ngetes-lagi/"/>
    <updated>2018-11-23T19:21:44+01:00</updated>
    <id>http://setoelkahfi.github.io/blog/2018/11/23/ini-ngetes-lagi</id>
    <content type="html"><![CDATA[<p>Gue mengalami kesulitan dalam hal blogging dengan Octopress ini. Sepertinya gue belum terlalu nerdy, atau hacky. Apapun itu. Tapi sepertinya Octopress ini menarik untuk ngeblog tentang masalah teknikal, karena memang setup nya saja teknikal banget. Well, let&rsquo;s see.</p>

<!-- more -->


<p>Next time, I need to learn how to setup this blog in different machine. Or, blogging from 2 machines at the same time. This is another update to test my understanding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seto, This Is How You Setup This Blog in Another Machine]]></title>
    <link href="http://setoelkahfi.github.io/blog/2018/11/23/seto-this-is-how-you-setup-this-blog-in-another-machine/"/>
    <updated>2018-11-23T12:14:36+01:00</updated>
    <id>http://setoelkahfi.github.io/blog/2018/11/23/seto-this-is-how-you-setup-this-blog-in-another-machine</id>
    <content type="html"><![CDATA[<p>This is new chapter in my life. I&rsquo;ve been working in Sweden since 19 November. Moving to Sweden itself is a new experience for me. So, everything surround that are also new, except some general things, such as work, Indonesian friends, iOS development, and MacBook.</p>

<p>I&rsquo;ve been working since I graduated from technical high school when I was 19. There are some Indonesian friends here in Sweden, mostly students. I&rsquo;ve been working as iOS developer since 2016, so it&rsquo;s not really new experience either. And since that time, I&rsquo;ve been using Macbook for sure.</p>

<p>But, I always face difficulties when I setup this blog in new machine. So, dear future self, this is how you do it.</p>

<!-- more -->




<h2>Prerequisites</h2>


<p>You need to have Ruby installed in you new shiny machine, Seto. You always use the latest stable branch. So, go ahead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby --version
</span></code></pre></td></tr></table></div></figure>


<p><span class='pullquote-right' data-pullquote='The good thing about meeting new people is you can recycle your jokes.'>
And for a matter of fact, you always use rbenv when your new machine is MacBook. You never use built in Ruby on Mac. To install it, you use Homebrew. So make sure you install it before you install rbenv. You always joke that you need to install version manager with package manager to eventually install dependency manager. The good thing about meeting new people is you can recycle your jokes.
</span></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install rbenv
</span><span class='line'><span class="nv">$ </span>rbenv init
</span><span class='line'><span class="c"># Load rbenv automatically by appending</span>
</span><span class='line'><span class="c"># the following to ~/.bash_profile:</span>
</span><span class='line'>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this step, you usually face difficulty. Basically you just need to put that line in your .bash_profile. Or just execute this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(rbenv init -)&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>If you open the file, it should looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim ~/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">NVM_DIR</span><span class="o">=</span><span class="s2">&quot;$HOME/.nvm&quot;</span>
</span><span class='line'><span class="o">[</span> -s <span class="s2">&quot;$NVM_DIR/nvm.sh&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">&quot;$NVM_DIR/nvm.sh&quot;</span>  <span class="c"># This loads nvm</span>
</span><span class='line'><span class="o">[</span> -s <span class="s2">&quot;$NVM_DIR/bash_completion&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">&quot;$NVM_DIR/bash_completion&quot;</span>  <span class="c"># This loads nvm bash_completion</span>
</span><span class='line'>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a time when you accidentally add the result of that command instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">RBENV_SHELL</span><span class="o">=</span>bash
</span><span class='line'><span class="nb">source</span> <span class="s1">&#39;/usr/local/Cellar/rbenv/1.1.1/libexec/../completions/rbenv.bash&#39;</span>
</span><span class='line'><span class="nb">command </span>rbenv rehash 2&gt;/dev/null
</span><span class='line'>rbenv<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">local command</span>
</span><span class='line'><span class="nb">  command</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -gt <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">shift</span>
</span><span class='line'><span class="nb">  </span><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s2">&quot;$command&quot;</span> in
</span><span class='line'>  rehash<span class="p">|</span>shell<span class="o">)</span>
</span><span class='line'>    <span class="nb">eval</span> <span class="s2">&quot;$(rbenv &quot;</span>sh-<span class="nv">$command</span><span class="s2">&quot; &quot;</span><span class="nv">$@</span><span class="s2">&quot;)&quot;</span><span class="p">;;</span>
</span><span class='line'>  *<span class="o">)</span>
</span><span class='line'>    <span class="nb">command </span>rbenv <span class="s2">&quot;$command&quot;</span> <span class="s2">&quot;$@&quot;</span><span class="p">;;</span>
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you find that code in your .bash_profile, remove.</p>

<p>Now you need to open new terminal, or you can just open new tab. Command + T is the shortcut. If you don&rsquo;t, your previous setup will not loaded. OK, now install latest Ruby version. Check the available ruby versions, then pick the latest stable release.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install --list
</span><span class='line'><span class="nv">$ </span>rbenv install 2.5.3
</span></code></pre></td></tr></table></div></figure>


<p>Set the latest Ruby version that you&rsquo;ve just download as global version. Or local. But always set it as global.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv global 2.5.3 <span class="c"># or</span>
</span><span class='line'><span class="nv">$ </span>rbenv <span class="nb">local </span>2.5.3
</span></code></pre></td></tr></table></div></figure>


<p>Done with the Ruby thing.</p>

<h2>Clone</h2>


<p>Make sure you only clone the source branch of the repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone -b <span class="nb">source </span>https://github.com/setoelkahfi/setoelkahfi.github.io
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>setoelkahfi.github.io
</span></code></pre></td></tr></table></div></figure>


<p>The mistake you always do is to clone the default branch from the repository, which is master. Don&rsquo;t do that. After you move to the cloned directory, then clone the master branch to _deploy folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/setoelkahfi/setoelkahfi.github.io _deploy
</span></code></pre></td></tr></table></div></figure>


<p>After that, you do setup for the project itself. Which include installing bundler and setup github pages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install bundler
</span><span class='line'><span class="nv">$ </span>rbenv rehash
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'><span class="nv">$ </span>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>If you fail with the rake things, you usually prepend the command with bundle exec.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>Then you need to enter the name of the repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Enter the <span class="nb">read</span>/write url <span class="k">for</span> your repository
</span><span class='line'><span class="o">(</span>For example, <span class="err">&#39;</span>git@github.com:your_username/your_username.github.com<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should done by mow.</p>

<h2>Start Blogging</h2>


<p>Then you need to test the actual blogging command. Generate post, preview, deploy. You can always refer to the official documentation of how to blog with Octopress. But here&rsquo;s some commands to get started.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake preview <span class="c"># to preview the blog in development server</span>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake new_post<span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span> <span class="c"># to make new post</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to workaround with this, there are two options. First, you should uninstall rake that doesn&rsquo;t match with the rake in the Gemfile.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem uninstall rake
</span><span class='line'>
</span><span class='line'>Select gem to uninstall:
</span><span class='line'> 1. rake-10.4.2
</span><span class='line'> 2. rake-10.5.0
</span><span class='line'> 3. rake-12.3.0
</span><span class='line'> 4. All versions
</span><span class='line'>&gt; 3
</span><span class='line'>Successfully uninstalled rake-12.3.0
</span></code></pre></td></tr></table></div></figure>


<p>After that, you can update the rake with this command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle update rake
</span></code></pre></td></tr></table></div></figure>


<p>though you unsuccessfully update the rake in Gemfile. But now, you should be able to use rake command without prepend it with <code>bundle exec</code>.</p>

<p>Secondly, you should update your Gemfile to the version of rake that already installed in your machine. For example;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  gem <span class="s1">&#39;rake&#39;</span>, <span class="s1">&#39;~&gt; 12.3.1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Always preview the blog before publishing it. Use the preview command and check in your browser on port 4000.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>This command will watch for changes in your blog, and regenerate it. You just need to refresh your browser.</p>

<h2>Deploy The Blog, Seto!</h2>


<p>You will likely face difficulty when trying to deploy the blog. So follow this guide below.</p>

<p>This happened when you run <code>rake setup_github_pages</code>: your deploy will be rejected because the tip of your current branch is behind.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">## Pushing generated _deploy website</span>
</span><span class='line'>To https://github.com/setoelkahfi/setoelkahfi.github.io
</span><span class='line'> ! <span class="o">[</span>rejected<span class="o">]</span>        master -&gt; master <span class="o">(</span>non-fast-forward<span class="o">)</span>
</span><span class='line'>error: failed to push some refs to <span class="s1">&#39;https://github.com/setoelkahfi/setoelkahfi.github.io&#39;</span>
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Integrate the remote changes <span class="o">(</span>e.g.
</span><span class='line'>hint: <span class="s1">&#39;git pull ...&#39;</span><span class="o">)</span> before pushing again.
</span><span class='line'>hint: See the <span class="s1">&#39;Note about fast-forwards&#39;</span> in <span class="s1">&#39;git push --help&#39;</span> <span class="k">for</span> details.
</span><span class='line'>
</span><span class='line'><span class="c">## Github Pages deploy complete</span>
</span></code></pre></td></tr></table></div></figure>


<p>The explanation for this problem is that, <code>rake setup_github_pages</code> will remove <code>_deploy</code> folder and initiate new repository inside of it. Or, when you run <code>rake generate</code>, it will make <code>master</code> branch which completely different from the remote branch. That&rsquo;s why git push will fail.</p>

<p>So, if it is happened, just remove _deploy folder, and do clone the master branch in it, again. Like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm -rf _deploy/
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/setoelkahfi/setoelkahfi.github.io _deploy
</span><span class='line'>
</span><span class='line'><span class="c"># You might want to make sure that your local master branch is align with remote master branch by doing this</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>_deploy/
</span><span class='line'><span class="nv">$ </span>git log
</span><span class='line'>commit 9663633e98e3b460191150a4cc656e1400acf974 <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
</span><span class='line'>Author: Seto Elkahfi &lt;seto@isolve.se&gt;
</span><span class='line'>Date:   Fri Nov <span class="m">23</span> 19:35:52 <span class="m">2018</span> +0100
</span><span class='line'>
</span><span class='line'>    Site updated at 2018-11-23 18:35:52 UTC
</span><span class='line'>
</span><span class='line'>commit f1959c62b14065998a4ea7d438576ca57d4e5405
</span><span class='line'>Author: Seto Elkahfi &lt;seto@isolve.se&gt;
</span><span class='line'>Date:   Fri Nov <span class="m">23</span> 19:31:38 <span class="m">2018</span> +0100
</span><span class='line'>
</span><span class='line'>    Site updated at 2018-11-23 18:31:38 UTC
</span><span class='line'>
</span><span class='line'><span class="c"># more commit logs</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that, <code>rake deploy</code> should be executed successfully.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake deploy
</span><span class='line'><span class="c">## Deploying branch to Github Pages </span>
</span><span class='line'><span class="c">## Pulling any updates from Github Pages </span>
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>Already up to date.
</span><span class='line'><span class="nb">cd</span> -
</span><span class='line'>rm -rf _deploy/index.html
</span><span class='line'>rm -rf _deploy/images
</span><span class='line'>rm -rf _deploy/about
</span><span class='line'>rm -rf _deploy/blog
</span><span class='line'>rm -rf _deploy/favicon.png
</span><span class='line'>rm -rf _deploy/atom.xml
</span><span class='line'>rm -rf _deploy/javascripts
</span><span class='line'>rm -rf _deploy/sitemap.xml
</span><span class='line'>rm -rf _deploy/robots.txt
</span><span class='line'>rm -rf _deploy/assets
</span><span class='line'>rm -rf _deploy/stylesheets
</span><span class='line'>
</span><span class='line'><span class="c">## Copying public to _deploy</span>
</span><span class='line'>cp -r public/. _deploy
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>
</span><span class='line'><span class="c">## Committing: Site updated at 2018-11-27 21:01:09 UTC</span>
</span><span class='line'><span class="o">[</span>master ec32357<span class="o">]</span> Site updated at 2018-11-27 21:01:09 UTC
</span><span class='line'> <span class="m">6</span> files changed, <span class="m">121</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">5</span> deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">## Pushing generated _deploy website</span>
</span><span class='line'>Counting objects: 18, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to <span class="m">4</span> threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>14/14<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>18/18<span class="o">)</span>, 2.93 KiB <span class="p">|</span> 1.46 MiB/s, <span class="k">done</span>.
</span><span class='line'>Total <span class="m">18</span> <span class="o">(</span>delta 8<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>remote: Resolving deltas: 100% <span class="o">(</span>8/8<span class="o">)</span>, completed with <span class="m">8</span> <span class="nb">local </span>objects.
</span><span class='line'>To https://github.com/setoelkahfi/setoelkahfi.github.io
</span><span class='line'>   9663633..ec32357  master -&gt; master
</span><span class='line'>
</span><span class='line'><span class="c">## Github Pages deploy complete</span>
</span><span class='line'><span class="nb">cd</span> -
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>This will generate your blog, copy the generated files into <code>_deploy/</code>, add them to git, commit and push them up to the master branch. In a few seconds you should get an email from Github telling you that your commit has been received and will be published on your site.</p>

<p>Don&rsquo;t forget to commit the source for your blog.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Summary</h2>


<p><li>You&rsquo;re not working with <code>master</code> branch. It is managed by <code>rake</code> command.</li>
<li>If you plan to blog in two machines, always make sure you push all the changes to your <code>source</code> and <code>master</code> branch.</li></p>

<p>That&rsquo;s it for today, Seto. Just remember, everytime you move to a new place, be a nice person as you want your new friends would be. Good luck for the new adventure. Hejd√•!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Spirit for Learning]]></title>
    <link href="http://setoelkahfi.github.io/blog/2015/08/01/the-spirit-for-learning/"/>
    <updated>2015-08-01T02:41:48+07:00</updated>
    <id>http://setoelkahfi.github.io/blog/2015/08/01/the-spirit-for-learning</id>
    <content type="html"><![CDATA[<p>So this is my first trial post with octopress.</p>

<p>[UPDATE 2016-03-22]</p>

<p>So finally I use MacOSX, hahaha</p>

<!-- more -->


<p>I&rsquo;ll keep below  example markup as my reference.</p>

<h2>Codeblock</h2>


<figure class='code'><figcaption><span>Javascript Array Syntax</span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Blockquote</h2>


<blockquote><p>Flying is learning how to throw yourself at the ground and miss.</p><footer><strong>Douglas Adams</strong> <cite>The Hichhikers Guide to the Galaxy</cite></footer></blockquote>




<h2>Pullquote</h2>


<p><span class='pullquote-right' data-pullquote='surround it like this'>
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that&rsquo;s all there is to it.
</span></p>

<h2>ImageTag</h2>


<p><img src="http://placekitten.com/890/280">
<img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten"></p>
]]></content>
  </entry>
  
</feed>
